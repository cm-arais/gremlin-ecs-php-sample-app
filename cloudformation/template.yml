---
AWSTemplateFormatVersion: "2010-09-09"
Description: "PHP with SQLite on Elastic Container Service"

Parameters:
  GremlinTeamId:
    Type: String
    Description: Gremlin Team Id
  GremlinTeamSecret:
    Type: String
    Description: Gremlin Team Secret
    NoEcho: true
  ExistingAppElasticContainerRepository:
    Type: String
    Description: An existing AppElasticContainerRepository(optional)
    Default: EXIST
    AllowedValues:
      - EXIST
      - NONE
  PermitGlobalIP:
    Type: String
    Description: Permit Global IP
    MinLength: 1
    Default: "0.0.0.0/0"
  CidrPrefix:
    Type: String
    Description: CIDR prefix
    MinLength: 1
    Default: "10.23"
  Ec2ImageId:
    Type: String
    Description: Image Name for ap-northeast-1(amzn-ami-2018.03.f-amazon-ecs-optimized)
    MinLength: 1
    Default: "ami-0d5f884dada5562c6"
  Ec2InstanceType:
    Type: String
    Description: Ec2InstanceType
    MinLength: 1
    Default: "t2.micro"
  AppEcrRepositoryName:
    Type: String
    Description: ElasticContainerRepository Name
    MinLength: 1
    Default: "php-app-repo"
  AppEcrRepositoryTag:
    Type: String
    Description: ElasticContainerRepository Tag
    MinLength: 1
    Default: "latest"

Conditions:
  CreateNewAppElasticContainerRepository:
    !Equals [!Ref ExistingAppElasticContainerRepository, NONE]

Resources:
  # ECR
  AppElasticContainerRepository:
    Type: "AWS::ECR::Repository"
    Condition: CreateNewAppElasticContainerRepository
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Sub "${AppEcrRepositoryName}"

  # ECS Cluster
  EcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "ecs-cluster-for-${AWS::StackName}"

  # ECS Task Definition
  EcsAppTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Sub "app-task-definition-for-${AWS::StackName}"
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ContainerDefinitions:
        - Name: php
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppEcrRepositoryName}/php:${AppEcrRepositoryTag}"
          Memory: 256
          Cpu: 256
          Essential: true
          PortMappings:
            - ContainerPort: 9000
              HostPort: 9000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/php
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: true
        - Name: nginx
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppEcrRepositoryName}/nginx:${AppEcrRepositoryTag}"
          Memory: 256
          Cpu: 256
          Essential: true
          Links:
            - "php"
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/nginx
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: true

  EcsGremlinTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Sub "gremlin-definition-for-${AWS::StackName}"
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      Volumes:
        - Name: var-lib-gremlin
          Host:
            SourcePath: /var/lib/gremlin
        - Name: var-log-gremlin
          Host:
            SourcePath: /var/log/gremlin
        - Name: var-run-docker-sock
          Host:
            SourcePath: /var/run/docker.sock
      ContainerDefinitions:
        - Name: Gremlin
          DnsSearchDomains: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/Gremlin
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: true
          EntryPoint:
            - /entrypoint.sh
          PortMappings: []
          Command:
            - daemon
          LinuxParameters:
            Capabilities:
              Add:
                - NET_ADMIN
                - SYS_BOOT
                - SYS_TIME
                - KILL
          Cpu: 128
          Environment:
            - Name: GREMLIN_CLIENT_TAGS
              Value: !Sub "orchestration=ecs,owner=classmethod,aws-account-id=${AWS::AccountId}"
            - Name: GREMLIN_TEAM_ID
              Value: !Ref GremlinTeamId
            - Name: GREMLIN_TEAM_SECRET
              Value: !Ref GremlinTeamSecret
          DnsServers: []
          MountPoints:
            - ReadOnly: false
              ContainerPath: /var/lib/gremlin
              SourceVolume: var-lib-gremlin
            - ReadOnly: false
              ContainerPath: /var/log/gremlin
              SourceVolume: var-log-gremlin
            - ReadOnly: true
              ContainerPath: /var/run/docker.sock
              SourceVolume: var-run-docker-sock
          DockerSecurityOptions: []
          MemoryReservation: 128
          VolumesFrom: []
          Image: gremlin/gremlin
          Essential: true

  # ECS Service
  AppEcsService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - LoadBalancerListener
    Properties:
      ServiceName: !Sub "ecs-app-service-for-${AWS::StackName}"
      Cluster: !Ref EcsCluster
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref EcsAppTaskDefinition
      DesiredCount: 1


  GremlinEcsService:
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: !Sub "ecs-gremlin-service-for-${AWS::StackName}"
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref EcsGremlinTaskDefinition
      SchedulingStrategy: DAEMON

  # ELB
  ElasticLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "elb-for-${AWS::StackName}"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroupWebapp
      Subnets:
        - !Ref SubnetApp0
        - !Ref SubnetApp1
      Type: application
      IpAddressType: ipv4
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      TargetType: instance
      Name: !Sub "TargetGroup-for-${AWS::StackName}"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcForEcs
  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP

  # IAM Role for ECS
  InstanceRoleForEcs:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "InstanceRole-for-${AWS::StackName}"
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement":
            [
              {
                "Action": "sts:AssumeRole",
                "Principal": { "Service": "ec2.amazonaws.com" },
                "Effect": "Allow",
                "Sid": "",
              },
            ],
        }
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
  EcsInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn:
      - InstanceRoleForEcs
    Properties:
      Roles:
        - !Ref InstanceRoleForEcs
      InstanceProfileName: !Sub "instanceProfile-for-${AWS::StackName}"

  # SecurityGroup for ELB
  SecurityGroupWebapp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "webapp-sg-for-${AWS::StackName}"
      GroupDescription: for webapp server
      VpcId: !Ref VpcForEcs
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Sub "${PermitGlobalIP}"
      Tags:
        - Key: Name
          Value: !Sub "webapp-sg-for-${AWS::StackName}"

  # Launch Configuration
  LaunchConfigurationForEcs:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !Sub "${Ec2ImageId}"
      SecurityGroups:
        - !Ref SecurityGroupForEcs
      InstanceType: !Sub "${Ec2InstanceType}"
      IamInstanceProfile: !Ref EcsInstanceProfile
      KeyName: "my-key"
      InstanceMonitoring: false
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y ecs-init

          cat << EOF1 > /etc/ecs/ecs.config
          ECS_CLUSTER=${EcsCluster}
          EOF1
  AutoScalingGroupForEcs:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub "auto-scaling-group-for-${AWS::StackName}"
      LaunchConfigurationName: !Ref LaunchConfigurationForEcs
      DesiredCapacity: 1
      MaxSize: 2
      MinSize: 0
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !Ref SubnetApp0
        - !Ref SubnetApp1
      Tags:
        - Key: Name
          Value: !Sub "auto-scaling-group-for-${AWS::StackName}"
          PropagateAtLaunch: True
  AutoScalingPolicyForEcs:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupForEcs
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: "50"

  # VPC etc
  VpcForEcs:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Sub "${CidrPrefix}.0.0/16"
      Tags:
        - Key: Name
          Value: !Sub "vpc-for-${AWS::StackName}"
  SubnetApp0:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Sub "${CidrPrefix}.0.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "app-pub1-subnet-for-${AWS::StackName}"
      VpcId: !Ref VpcForEcs
  SubnetApp1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Sub "${CidrPrefix}.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "app-pub2-subnet-for-${AWS::StackName}"
      VpcId: !Ref VpcForEcs
  IgwForEcs:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "igw-for-${AWS::StackName}"
  IgwAttachmentForEcs:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IgwForEcs
      VpcId: !Ref VpcForEcs
  RouteTableForEcsDefault:
    Type: "AWS::EC2::Route"
    DependsOn: IgwAttachmentForEcs
    Properties:
      RouteTableId: !Ref RouteTableForEcs
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IgwForEcs
  RouteTableForEcs:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VpcForEcs
      Tags:
        - Key: Name
          Value: !Sub "route-table-for-${AWS::StackName}"
  SubnetRouteTableAttachment0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForEcs
      SubnetId: !Ref SubnetApp0
  SubnetRouteTableAttachment1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForEcs
      SubnetId: !Ref SubnetApp1
  SecurityGroupForEcs:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "security-group-for-${AWS::StackName}"
      GroupDescription: Security group with no ingress rule
      VpcId: !Ref VpcForEcs
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupWebapp
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub "${PermitGlobalIP}"
      Tags:
        - Key: Name
          Value: !Sub "security-group-for-${AWS::StackName}"
